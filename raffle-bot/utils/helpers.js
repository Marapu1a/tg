async function checkSubscriptions(telegram, userId, channels) {
    try {
        for (const channel of channels) {
            const status = await telegram.getChatMember(channel, userId);
            if (["left", "kicked"].includes(status.status)) {
                return false;
            }
        }
        return true;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", err);
        return false;
    }
}

function pickWinners(participants, count) {
    const shuffled = [...participants].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
}

async function finishRaffle(bot, raffle, updateFn) {
    let winners = [];
    try {
        const count = Math.min(Number(raffle.winnerCount), raffle.participants.length);
        winners = pickWinners(raffle.participants, count);

        // 1. –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        const publicMessage =
            `–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω üí´  
–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º, –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª!

–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏ –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –Ω–∏–º–∏ –ª–∏—á–Ω–æ.  
–ï—Å–ª–∏ –Ω–µ –ø–æ–≤–µ–∑–ª–æ ‚Äî –Ω–µ –±–µ–¥–∞, –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –º–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.`;

        await bot.telegram.sendMessage(raffle.channelId, publicMessage);

        try {
            await bot.telegram.editMessageReplyMarkup(
                raffle.channelId,
                raffle.messageId,
                undefined,
                {
                    inline_keyboard: [
                        [{ text: "üìã –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω", callback_data: `status_${raffle.id}` }]
                    ]
                }
            );
        } catch (e) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", e.message);
        }

        // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ raffle
        updateFn(raffle.id, {
            winners,
            isFinished: true,
        });

        // 3. –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        const date = new Date(raffle.endTime).toLocaleDateString("ru-RU");
        const postLink = `https://t.me/${raffle.channelName.replace("@", "")}/${raffle.messageId}`;
        const mentions = winners.length > 0
            ? winners.map(id => `‚Ä¢ [–ü–æ–±–µ–¥–∏—Ç–µ–ª—å](tg://user?id=${id})`).join("\n")
            : "‚Äî –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç";

        const adminMessage =
            `üéâ –†–æ–∑—ã–≥—Ä—ã—à: *${raffle.title}*  
üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${date}  
üì® –ü–æ—Å—Ç: [–û—Ç–∫—Ä—ã—Ç—å](${postLink})

üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n  
${mentions}`;

        await bot.telegram.sendMessage(raffle.ownerId, adminMessage, {
            parse_mode: "Markdown",
            disable_web_page_preview: true,
        });

        // 4. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        try {
            const memberCountEnd = await bot.telegram.getChatMembersCount(raffle.channelName);
            console.log("üìä memberCountEnd:", memberCountEnd);
            // (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
        } catch (err) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å memberCountEnd:", err.message);
        }

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", err.message);
    }
}

module.exports = {
    checkSubscriptions,
    pickWinners,
    finishRaffle
};