const { Scenes, Markup } = require("telegraf");
const { v4: uuidv4 } = require("uuid");

const demoScene = new Scenes.WizardScene(
    "demoRaffleScene",

    // –®–∞–≥ 1: –∫–∞–Ω–∞–ª
    async (ctx) => {
        ctx.reply("üì£ –í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–µ–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @my_channel (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∞, –ø–æ—Å—Ç —É–π–¥—ë—Ç —Ç–µ–±–µ –≤ –õ–°):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 2: –¥–æ–ø. –∫–∞–Ω–∞–ª—ã
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const channel = ctx.message.text.trim();
        if (!/^@[\w\d_]{5,}$/.test(channel)) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @my_channel");
            return;
        }

        ctx.wizard.state.data = { channel };
        ctx.reply("üîó –£–∫–∞–∂–∏ @—é–∑–µ—Ä–Ω–µ–π–º—ã –¥–æ–ø. –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ ¬´-¬ª, –µ—Å–ª–∏ –Ω–µ—Ç):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 3: –Ω–∞–∑–≤–∞–Ω–∏–µ
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const raw = ctx.message.text.trim();
        ctx.wizard.state.data.additionalChannels = raw === "-" ? [] : raw.split(",").map(s => s.trim());
        ctx.reply("üè∑ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 4: –æ–ø–∏—Å–∞–Ω–∏–µ
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const title = ctx.message.text.trim();
        if (title.length < 3) {
            ctx.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤");
            return;
        }

        ctx.wizard.state.data.title = title;
        ctx.reply("üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 5: –æ–ø–∏—Å–∞–Ω–∏–µ + –∑–∞–ø—Ä–æ—Å media
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const desc = ctx.message.text.trim();
        if (desc.length < 5) {
            ctx.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 —Å–∏–º–≤–æ–ª–æ–≤");
            return;
        }

        ctx.wizard.state.data.description = desc;
        ctx.reply("üìé –í—Å—Ç–∞–≤—å `file_id` –≥–∏—Ñ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±–µ–∑ –≥–∏—Ñ–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ ¬´-¬ª.");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 6: –≤–∞–ª–∏–¥–∞—Ü–∏—è media + –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const input = ctx.message.text.trim();
        if (input === "-") {
            ctx.wizard.state.data.media = null;
            ctx.reply("‚è≥ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º):");
            return ctx.wizard.next();
        }

        if (!/^[-_\w]{20,}$/.test(input)) {
            ctx.reply("‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ `file_id`. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ `-`.");
            return;
        }

        ctx.wizard.state.data.media = input;
        ctx.reply("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ.\n‚è≥ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 7: –≤—Ä–µ–º—è
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const input = ctx.message.text.toLowerCase().trim();

        if (!/^((\d+[–¥—á–º])\s?)+$/.test(input)) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º");
            return;
        }

        let days = 0, hours = 0, minutes = 0;
        const parts = input.split(/\s+/);
        for (const part of parts) {
            if (/^\d+–¥$/.test(part)) {
                days = parseInt(part);
            } else if (/^\d+—á$/.test(part)) {
                hours = parseInt(part);
            } else if (/^\d+–º$/.test(part)) {
                minutes = parseInt(part);
            } else {
                ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º");
                return;
            }
        }

        const totalMs = ((days * 24 + hours) * 60 + minutes) * 60 * 1000;
        if (totalMs <= 0) {
            ctx.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.");
            return;
        }

        ctx.wizard.state.data.endTime = Date.now() + totalMs;
        ctx.reply("üèÜ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 8: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–µ–º–æ
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.");
            return;
        }

        const num = parseInt(ctx.message.text.trim());
        if (isNaN(num) || num <= 0 || num > 100) {
            ctx.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–æ—Ç 1 –¥–æ 100)");
            return;
        }

        ctx.wizard.state.data.winnerCount = num;
        const { channel, additionalChannels, title, description, endTime, winnerCount, media } = ctx.wizard.state.data;
        const raffleId = uuidv4();

        const caption =
            `üéâ *${title}*\n\n` +
            `${description}\n\n` +
            `‚è≥ –î–æ: *${new Date(endTime).toLocaleString()}*\n` +
            `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: *${winnerCount}*\n\n` +
            `‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –£—á–∞—Å—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.`;

        const keyboard = {
            inline_keyboard: [[
                { text: "üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data: `demo_join_${raffleId}` },
                { text: "üìã –°—Ç–∞—Ç—É—Å", callback_data: `demo_status_${raffleId}` }
            ]]
        };

        try {
            if (media) {
                await ctx.telegram.sendAnimation(ctx.from.id, media, {
                    caption,
                    parse_mode: "Markdown",
                    reply_markup: keyboard
                });
            } else {
                await ctx.telegram.sendMessage(ctx.from.id, caption, {
                    parse_mode: "Markdown",
                    reply_markup: keyboard
                });
            }

            await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –≠—Ç–æ –¥–µ–º–æ. –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º.");
        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ:", err);
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–º–æ. –ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
        }

        return ctx.scene.leave();
    }
);

module.exports = {
    demoScene
};