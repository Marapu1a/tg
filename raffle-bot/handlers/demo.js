// handlers/demo.js
const { Scenes, Markup } = require("telegraf");
const { v4: uuidv4 } = require("uuid");

const demoScene = new Scenes.WizardScene(
    "demoRaffleScene",

    // –®–∞–≥ 1: –∫–∞–Ω–∞–ª
    async (ctx) => {
        ctx.reply("üì£ –í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–µ–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @my_channel (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∞, –ø–æ—Å—Ç —É–π–¥—ë—Ç —Ç–µ–±–µ –≤ –õ–°):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 2: –¥–æ–ø. –∫–∞–Ω–∞–ª—ã
    async (ctx) => {
        const channel = ctx.message.text.trim();
        if (!/^@[\w\d_]{5,}$/.test(channel)) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –∏–º–µ–Ω–Ω–æ @—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞. –ù–∞–∑–≤–∞–Ω–∏—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç. –ü—Ä–∏–º–µ—Ä: @my_channel");
            return;
        }
        ctx.wizard.state.data = {
            channel,
        };
        ctx.reply("üîó –£–∫–∞–∂–∏ @—é–∑–µ—Ä–Ω–µ–π–º—ã –¥–æ–ø. –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ ¬´-¬ª, –µ—Å–ª–∏ –Ω–µ—Ç):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 3: –Ω–∞–∑–≤–∞–Ω–∏–µ
    async (ctx) => {
        const raw = ctx.message.text.trim();
        ctx.wizard.state.data.additionalChannels = raw === "-" ? [] : raw.split(",").map(s => s.trim());
        ctx.reply("üè∑ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 4: –æ–ø–∏—Å–∞–Ω–∏–µ
    async (ctx) => {
        const title = ctx.message.text.trim();
        if (title.length < 3) {
            ctx.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤");
            return;
        }
        ctx.wizard.state.data.title = title;
        ctx.reply("üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 5: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    async (ctx) => {
        const desc = ctx.message.text.trim();
        if (desc.length < 5) {
            ctx.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 —Å–∏–º–≤–æ–ª–æ–≤");
            return;
        }
        ctx.wizard.state.data.description = desc;
        ctx.reply("‚è≥ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 6: –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    async (ctx) => {
        const input = ctx.message.text.toLowerCase().trim();
        const timeRegex = /(?:(\d+)\s*–¥)?\s*(?:(\d+)\s*—á)?\s*(?:(\d+)\s*–º)?/;
        const match = input.match(timeRegex);
        if (!match) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º");
            return;
        }

        const days = parseInt(match[1] || 0);
        const hours = parseInt(match[2] || 0);
        const minutes = parseInt(match[3] || 0);
        const totalMs = ((days * 24 + hours) * 60 + minutes) * 60 * 1000;

        if (totalMs <= 0) {
            ctx.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º");
            return;
        }

        ctx.wizard.state.data.endTime = Date.now() + totalMs;
        ctx.reply("üèÜ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 7: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –õ–°
    async (ctx) => {
        const num = parseInt(ctx.message.text.trim());
        if (isNaN(num) || num <= 0 || num > 100) {
            ctx.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–æ—Ç 1 –¥–æ 100)");
            return;
        }
        ctx.wizard.state.data.winnerCount = num;

        const { channel, additionalChannels, title, description, endTime, winnerCount } = ctx.wizard.state.data;
        const raffleId = uuidv4();

        const caption =
            `üéâ *${title}*\n\n` +
            `${description}\n\n` +
            `‚è≥ –î–æ: *${new Date(endTime).toLocaleString()}*\n` +
            `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: *${winnerCount}*\n\n` +
            `‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –£—á–∞—Å—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.`;

        await ctx.telegram.sendAnimation(ctx.from.id, "CgACAgQAAxkBAAIOVGf9WpfyI2zeVk7hzOSeMagZb6qOAAIkAwAChWoEU6ObsrEluW9lNgQ", {
            caption,
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [[
                    { text: "üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data: `demo_join_${raffleId}` },
                    { text: "üìã –°—Ç–∞—Ç—É—Å", callback_data: `demo_status_${raffleId}` }
                ]]
            }
        });

        await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –≠—Ç–æ –¥–µ–º–æ. –ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.");
        return ctx.scene.leave();
    }
);

module.exports = {
    demoScene
};