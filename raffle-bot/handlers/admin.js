const { Scenes, Markup } = require("telegraf");
const { add, getAll } = require("../raffles");
const { v4: uuidv4 } = require("uuid");
const { createRaffle } = require("../utils/raffleSchema");

// 1. –°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö file_id –∞–Ω–∏–º–∞—Ü–∏–π
const gifs = [
    'CgACAgQAAxkBAAIOmWf-IAozHUuGLzwXvizpBydfawntAAK1BAACKd5lUx6x-1tNgNGvNgQ',
];

// 2. –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä
const randomGifId = gifs[Math.floor(Math.random() * gifs.length)];

const createRaffleScene = new Scenes.WizardScene(
    "createRaffleScene",

    // –®–∞–≥ 1: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª
    (ctx) => {
        ctx.reply("üì¢ –£–∫–∞–∂–∏ @—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –±—É–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à:");
        ctx.wizard.state.data = {};
        return ctx.wizard.next();
    },

    // –®–∞–≥ 2: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ + –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–æ–ø. –∫–∞–Ω–∞–ª—ã
    (ctx) => {
        const channel = ctx.message.text.trim();
        if (!/^@[\w\d_]{5,}$/.test(channel)) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @my_channel");
            return;
        }
        ctx.wizard.state.data.channel = channel;
        ctx.reply("üîó –£–∫–∞–∂–∏ @—é–∑–µ—Ä–Ω–µ–π–º—ã –¥–æ–ø. –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ ¬´-¬ª, –µ—Å–ª–∏ –Ω–µ—Ç):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 3: –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ø. –∫–∞–Ω–∞–ª–æ–≤ + –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    (ctx) => {
        const raw = ctx.message.text.trim();
        if (raw !== "-" && !/^(@[\w\d_]+)(\s*,\s*@[\w\d_]+)*$/.test(raw)) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @one, @two, @three –∏–ª–∏ - –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–ø. –∫–∞–Ω–∞–ª–æ–≤");
            return;
        }
        ctx.wizard.state.data.additionalChannels = raw === "-" ? [] : raw.split(",").map(s => s.trim());
        ctx.reply("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 4: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è + –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    (ctx) => {
        const title = ctx.message.text.trim();
        if (title.length < 3) {
            ctx.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤");
            return;
        }
        ctx.wizard.state.data.title = title;
        ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 5: –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è + –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≤—Ä–µ–º—è
    (ctx) => {
        const desc = ctx.message.text.trim();
        if (desc.length < 5) {
            ctx.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 —Å–∏–º–≤–æ–ª–æ–≤");
            return;
        }
        ctx.wizard.state.data.description = desc;
        ctx.reply("‚è≥ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 6: –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ + –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    (ctx) => {
        const input = ctx.message.text.toLowerCase().trim();
        const timeRegex = /(?:(\d+)\s*–¥)?\s*(?:(\d+)\s*—á)?\s*(?:(\d+)\s*–º)?/;
        const match = input.match(timeRegex);
        if (!match) {
            ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º");
            return;
        }

        const days = parseInt(match[1] || 0);
        const hours = parseInt(match[2] || 0);
        const minutes = parseInt(match[3] || 0);
        const totalMs = ((days * 24 + hours) * 60 + minutes) * 60 * 1000;

        if (totalMs <= 0) {
            ctx.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü—Ä–∏–º–µ—Ä: 1–¥ 2—á 30–º");
            return;
        }

        ctx.wizard.state.data.endTime = Date.now() + totalMs;
        ctx.reply("üèÜ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 7: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    (ctx) => {
        const num = parseInt(ctx.message.text.trim());
        if (isNaN(num) || num <= 0 || num > 100) {
            ctx.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–æ—Ç 1 –¥–æ 100)");
            return;
        }
        ctx.wizard.state.data.winnerCount = num;

        const data = ctx.wizard.state.data;
        ctx.reply(
            `üîí –ü—Ä–æ–≤–µ—Ä—å:\n\n` +
            `–ö–∞–Ω–∞–ª: ${data.channel}\n` +
            `–î–æ–ø. –∫–∞–Ω–∞–ª—ã: ${data.additionalChannels.join(", ") || "–ù–µ—Ç"}\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${data.title}\n` +
            `–û–ø–∏—Å–∞–Ω–∏–µ: ${data.description}\n` +
            `–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(data.endTime).toLocaleString()}\n` +
            `–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${data.winnerCount}`,
            Markup.inlineKeyboard([
                Markup.button.callback("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "confirm_raffle"),
                Markup.button.callback("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", "cancel_raffle")
            ])
        );
        return ctx.wizard.next();
    },

    // –®–∞–≥ 8: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    async (ctx) => {
        if (ctx.callbackQuery?.data === "confirm_raffle") {
            const d = ctx.wizard.state.data;
            const { channel, additionalChannels, title, description, endTime, winnerCount } = d;

            const active = getAll().find(r => !r.isFinished && r.channelName === channel);
            if (active) {
                await ctx.reply("‚ùå –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –∏–¥—ë—Ç —Ä–æ–∑—ã–≥—Ä—ã—à. –ó–∞–≤–µ—Ä—à–∏ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–π.");
                return ctx.scene.leave();
            }

            const raffleId = uuidv4();
            let memberCountStart = 0;

            try {
                memberCountStart = await ctx.telegram.getChatMembersCount(channel);
                console.log("üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ:", memberCountStart);
            } catch (err) {
                console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", err.message);
            }

            try {
                const caption =
                    `üéâ *${title}*\n\n` +
                    `${description}\n\n` +
                    `‚è≥ –î–æ: *${new Date(endTime).toLocaleString()}*\n` +
                    `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: *${winnerCount}*`;

                const message = await ctx.telegram.sendAnimation(channel, randomGifId, {
                    caption,
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: "üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data: `join_${raffleId}` },
                                { text: "üìã –°—Ç–∞—Ç—É—Å", callback_data: `status_${raffleId}` }
                            ]
                        ]
                    }
                });

                console.log(ctx.from.id);

                add(createRaffle({
                    id: raffleId,
                    channelId: message.chat.id,
                    channelName: channel,
                    additionalChannels,
                    title,
                    description,
                    messageId: message.message_id,
                    startAt: Date.now(),
                    endTime,
                    participants: [],
                    winners: [],
                    winnerCount,
                    isFinished: false,
                    memberCountStart,
                    ownerId: ctx.from.id,
                }));

                await ctx.reply("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!");
            } catch (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", err);
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ.");
            }
        } else {
            await ctx.reply("‚ùå –û—Ç–º–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.");
        }
        return ctx.scene.leave();
    }
);

module.exports = {
    createRaffleScene
};
